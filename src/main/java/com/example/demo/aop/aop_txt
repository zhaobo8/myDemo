AOP：即面向切面编程，是oop(面向对象编程)的一种更高的设计思想
 oop 侧重于对象的封装和提取；aop侧重于方面组件，方面组件可以理解为封装了通用功能的组件，方面组件可以通过配置方式，
 灵活地切入到某一批目标对象方法上
 AOP用于处理系统中分布于各个模块的横切关注点，比如事务管理，日志，缓存等

AOP的实现的关键，在于aop框架自动创建aop代理。
 aop代理分为：静态代理和动态代理。静态代理的代表：AspectJ;动态代理的代表：Spring AOP。
 静态代理的特点，编译时增强；动态代理的特点：运行时增强，不修改字节码文件，在内存中创建aop对象

 Spring aop 的动态代理又分为两个：jdk代理和cglib代理
 jdk代理，是通过反射来接收被代理的类，并且要求被代理的类必须实现了一个接口。jdk代理的核心是InvocationHandler接口和proxy类。
 cglib，是一个代码生成的类库，可在运行时动态的生成某个类的子类，所以cglib也是通过继承来实现动态代理的，
 因此如果某个类被标记为final,那么就无法通过cglib来代理